[{"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\index.js":"1","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\App.js":"2","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\GlobalStyles.js":"3","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Router.js":"4","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Header.js":"5","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\index.js":"6","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\index.js":"7","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\index.js":"8","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\index.js":"9","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js":"10","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js":"11","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js":"12","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js":"13","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js":"14","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js":"15","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js":"16","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js":"17","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\api.js":"18","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Section.js":"19","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Message.js":"20","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Poster.js":"21","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Loader.js":"22"},{"size":208,"mtime":1606873625966,"results":"23","hashOfConfig":"24"},{"size":185,"mtime":1606877616099,"results":"25","hashOfConfig":"24"},{"size":586,"mtime":1607409953793,"results":"26","hashOfConfig":"24"},{"size":942,"mtime":1606882594549,"results":"27","hashOfConfig":"24"},{"size":1541,"mtime":1607409484738,"results":"28","hashOfConfig":"24"},{"size":79,"mtime":1606881937349,"results":"29","hashOfConfig":"24"},{"size":73,"mtime":1606876948070,"results":"30","hashOfConfig":"24"},{"size":85,"mtime":1606876948730,"results":"31","hashOfConfig":"24"},{"size":85,"mtime":1606876945118,"results":"32","hashOfConfig":"24"},{"size":2155,"mtime":1606886167425,"results":"33","hashOfConfig":"24"},{"size":2308,"mtime":1607408391735,"results":"34","hashOfConfig":"24"},{"size":2176,"mtime":1606891261740,"results":"35","hashOfConfig":"24"},{"size":1748,"mtime":1607409685568,"results":"36","hashOfConfig":"24"},{"size":2657,"mtime":1607410707934,"results":"37","hashOfConfig":"24"},{"size":2635,"mtime":1607410727126,"results":"38","hashOfConfig":"24"},{"size":2629,"mtime":1607412482720,"results":"39","hashOfConfig":"24"},{"size":3338,"mtime":1607410096190,"results":"40","hashOfConfig":"24"},{"size":1052,"mtime":1606877522228,"results":"41","hashOfConfig":"24"},{"size":747,"mtime":1606883701204,"results":"42","hashOfConfig":"24"},{"size":570,"mtime":1606883625940,"results":"43","hashOfConfig":"24"},{"size":1863,"mtime":1606890565393,"results":"44","hashOfConfig":"24"},{"size":383,"mtime":1606883563503,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"c7smys",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\index.js",[],["96","97"],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\App.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\GlobalStyles.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Router.js",["98"],"import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n\r\nimport Home from \"../routes/Home\";\r\nimport TV from \"../routes/TV\";\r\nimport Search from \"../routes/Search\";\r\nimport Detail from \"../routes/Detail\";\r\n// 오로지 라우터만 관리하는 컴포넌트가 될 것 이다.\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      {/* 기본적으로 Switch가 없이 라우터를 배치하면 모든 라우터를 탄다.\r\n    Switch를 활용하면 오로지 하나의 라우터만 타게된다.\r\n    */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" exact component={Search} />\r\n        <Route path=\"/movie/:id\" exact component={Detail} />\r\n        <Route path=\"/show/:id\" exact component={Detail} />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Header.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\index.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js",["99","100"],"import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"../../api\";\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을\r\n// 구현하고, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // 클래스형 컴포넌트에서 state 만들기\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  // constructor : 클래스 생성자\r\n  //  생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 컴포넌트가 부모 컴포넌트에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(()=>(), [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, 클래스형 컴포넌트의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 async 키워드를 붙여주면 된다.\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // data : { results : [{}, {}, {}, ...]}\r\n\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"영화 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당 된다.\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js",["101","102"],"import React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  // submit\r\n  handleSubmit = (event) => {\r\n    //form에서 submit이 작동은 하는데, 원래 하고자 했던 이벤트를 취소한다.\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  // update -> onChange에서 일어날 이벤트\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value: searchTerm },\r\n    } = event;\r\n\r\n    this.setState({ searchTerm });\r\n  };\r\n  // search -> 검색어를 넣은 api호출\r\n  // 이벤트가 일어났을 때 비동기로 호출\r\n  // 1. 검색어 가져오기\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n\r\n    // 2.loading 설정하기\r\n    this.setState({ loading: true });\r\n\r\n    // 3. 실제 api 호출하기\r\n    // 데이터의 응답 형태 : { data:{results:[{},{},{}...]}}\r\n    try {\r\n      // movieApi.search->movieResults에 담기\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch (error) {\r\n      // tvApi.search -> tvResults에 담기\r\n      // unpacking 기법을 활용해서\r\n      this.setState({\r\n        error: \"결과를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  //함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n\r\n    console.log(movieResults);\r\n\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js",["103","104"],"import React from \"react\";\r\nimport TvPresenter from \"./TvPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을\r\n// 구현하고, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // 클래스형 컴포넌트에서 state 만들기\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  // constructor : 클래스 생성자\r\n  //  생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 컴포넌트가 부모 컴포넌트에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(()=>(), [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, 클래스형 컴포넌트의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 async 키워드를 붙여주면 된다.\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // data : { results : [{}, {}, {}, ...]}\r\n\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n      console.log(topRated);\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingToday,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"프로그램 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당 된다.\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n\r\n    return (\r\n      <TvPresenter\r\n        topRated={topRated}\r\n        airingToday={airingToday}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js",["105"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  // 생성자에서 할 일\r\n  // 영화 상세 페이지를 표현해야 하는지 설정\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // id 가지고 오기 -> match.params\r\n    // 만약에 id가 안들어오면 HOME으로 강제 이동 -> history의 push함수가 해준다.\r\n    // 사용자의 요청을 서버가 받고, 재요청 하도록 하는 것을 redirect라고 한다.\r\n\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id);\r\n\r\n    // 올바르지 않은 id라면\r\n    if (isNaN(parsedId)) {\r\n      //Home으로 redirect\r\n      return push(\"/\");\r\n    }\r\n\r\n    let result = null;\r\n\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"아무것도 찾을 수가 없어요\",\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  //함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n","C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js",["106"],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js",["107"],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\api.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Section.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Message.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Poster.js",[],"C:\\Users\\Bit\\Desktop\\bit-react\\bitflix\\src\\components\\Loader.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":10,"column":1,"nodeType":"114","endLine":26,"endColumn":3},{"ruleId":"112","severity":1,"message":"115","line":8,"column":1,"nodeType":"114","endLine":76,"endColumn":2},{"ruleId":"116","severity":1,"message":"117","line":20,"column":3,"nodeType":"118","messageId":"119","endLine":22,"endColumn":4},{"ruleId":"112","severity":1,"message":"115","line":5,"column":1,"nodeType":"114","endLine":90,"endColumn":2},{"ruleId":"116","severity":1,"message":"117","line":68,"column":3,"nodeType":"118","messageId":"119","endLine":70,"endColumn":4},{"ruleId":"112","severity":1,"message":"115","line":8,"column":1,"nodeType":"114","endLine":77,"endColumn":2},{"ruleId":"116","severity":1,"message":"117","line":20,"column":3,"nodeType":"118","messageId":"119","endLine":22,"endColumn":4},{"ruleId":"112","severity":1,"message":"115","line":5,"column":1,"nodeType":"114","endLine":67,"endColumn":2},{"ruleId":"120","severity":1,"message":"121","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":15},{"ruleId":"120","severity":1,"message":"121","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":15},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous class","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Message' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]